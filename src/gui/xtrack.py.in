# -*- coding: utf-8 -*-

import wxversion
wxversion.ensureMinimal('2.8')

import callers_frame
import data_manager as DataManager
import decorations as Decorations
import Image
import math
import matplotlib.animation as animation
import numpy as np
import os
import plotting_manager as PlottingManager
import subprocess
import sys
import wx
import wx.lib.scrolledpanel as scrolled

from collections import defaultdict
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.backends.backend_wxagg import NavigationToolbar2WxAgg as NavigationToolbar
from wx.lib.mixins.listctrl import CheckListCtrlMixin, ListCtrlAutoWidthMixin

Verbose = False

INSTALLATION_PATH=os.getenv('TRACKING_HOME')


class CheckListCtrl(wx.ListCtrl, CheckListCtrlMixin, ListCtrlAutoWidthMixin):
    def __init__(self, parent):
        wx.ListCtrl.__init__(self, parent, -1, style=wx.LC_REPORT | wx.SUNKEN_BORDER)
        CheckListCtrlMixin.__init__(self)
        ListCtrlAutoWidthMixin.__init__(self)

class Gap(wx.BoxSizer):
  def __init__(self, orientation):
    wx.BoxSizer.__init__(self, orientation)
    self.AddSpacer(1)

class FrameTimeline(scrolled.ScrolledPanel):
  def __init__(self, main, parent, frames, plotter):

    self.MainFrame    = main
    self.ThumbAxes    = defaultdict()
    self.ThumbCanvas  = defaultdict() 
    self.ThumbFigures = defaultdict() 
    self.Plotter      = plotter

    scrolled.ScrolledPanel.__init__(self, parent, -1, size=(-1, 110))
     
    hbox  = wx.BoxSizer(wx.HORIZONTAL)
    for frame in range(1, frames+1):
      thumb_panel  = wx.Panel(self)
      thumb_figure = Figure((1.0, 1.0), dpi=100)
      thumb_canvas = FigureCanvas(thumb_panel, 1000+frame, thumb_figure)
      thumb_axis   = thumb_figure.add_subplot(111)
     
      thumb_figure.suptitle(str(frame))
      thumb_figure.set_facecolor("#FFFFFF")
      thumb_figure.canvas.mpl_connect('button_press_event', self.on_Thumb_Click)

#      thumb_axis.set_autoscalex_on(True)
#      thumb_axis.set_autoscaley_on(True)
      thumb_axis.get_xaxis().set_visible(False)
      thumb_axis.get_yaxis().set_visible(False)

      self.ThumbFigures[frame] = thumb_figure
      self.ThumbCanvas[frame]  = thumb_canvas
      self.ThumbAxes[frame]    = thumb_axis
      hbox.Add( thumb_panel, 0, wx.EXPAND | wx.ALL | wx.CENTER_FRAME, 5 )

    self.SetSizer(hbox)
    self.SetAutoLayout(1)
    self.SetupScrolling()
    self.HighlightSelection(1)

  def on_Thumb_Click(self, event):
    if (Verbose):
      print "EVT_LEFT_DOWN:: on_Frame_Click: Clicked on frame #", event.GetEventObject().GetId()
    frame = event.canvas.GetId() - 1000
    if App.main.in_Frame_View():
      App.main.SelectFrame( frame )
    

  def GetThumbAxes(self, frame):
    return self.ThumbAxes[frame]

  def HighlightSelection(self, frame):
    for i in self.ThumbFigures:
      if (i == frame):
        self.ThumbFigures[i].set_facecolor("#306CBD")
      else:
        self.ThumbFigures[i].set_facecolor("#FFFFFF")
      self.ThumbCanvas[i].draw()

  def ClearThumbs(self):
    for i in self.ThumbAxes:
      self.ThumbAxes[i].cla()

  def UpdateCanvas(self):
    for i in self.ThumbCanvas:
      self.ThumbCanvas[i].draw()

  def Enable(self):
    for i in self.ThumbFigures:
      if (i == App.main.GetSelectedFrame()):
        self.ThumbFigures[i].set_facecolor("#306CBD")
      else:
        self.ThumbFigures[i].set_facecolor("#FFFFFF")
      self.ThumbAxes[i].set_axis_bgcolor("#FFFFFF")
      self.ThumbCanvas[i].draw()

  def Disable(self):
    for i in self.ThumbFigures:
      if (i == App.main.GetSelectedFrame()):
        self.ThumbFigures[i].set_facecolor("#808387")
      else:
        self.ThumbFigures[i].set_facecolor("#f2f1f0")
      self.ThumbAxes[i].set_axis_bgcolor("#f2f1f0")
      self.ThumbCanvas[i].draw()

  def Rescale(self):
    for i in self.ThumbAxes:
      self.ThumbAxes[i].set_xlim( self.Plotter.GetXRange( i ) )
      self.ThumbAxes[i].set_ylim( self.Plotter.GetYRange( i ) )
      if (self.MainFrame.LogX() == True):
        self.ThumbAxes[i].set_xscale('symlog')
      else:
        self.ThumbAxes[i].set_xscale('linear')
      if (self.MainFrame.LogY() == True):
        self.ThumbAxes[i].set_yscale('symlog')
      else:
        self.ThumbAxes[i].set_yscale('linear')

      self.ThumbCanvas[i].draw()


#
# The main frame of the application
#
class MainFrame(wx.Frame, animation.TimedAnimation):

  def __init__(self, parent, title, tracking_data, tracking_plotter):
    #
    # A "-1" in the size parameter instructs wxWidgets to use the default size.
    #
    wx.Frame.__init__(self, parent, title=title)

    w   = wx.SystemSettings.GetMetric(wx.SYS_SCREEN_X)
    h   = wx.SystemSettings.GetMetric(wx.SYS_SCREEN_Y)
    pos = (w / 2, (h / 2) - 350)

    self.Data           = tracking_data
    self.Plotter        = tracking_plotter

    self.FocusOnFrame   = 1 

    self.LoadIcons()
    self.SetPosition(pos)
    self.CreateStatusBar()
    self.Setup_Controls()

    self.Plotter.Initialize( self )
    self.Plotter.ComputePlots( )
    self.Plotter.Display_Objects( )

  def LoadIcons(self):
    self.bmp_play            = wx.Bitmap(INSTALLATION_PATH+"/etc/icons/play.png")
    self.bmp_prev            = wx.Bitmap(INSTALLATION_PATH+"/etc/icons/prev.png")
    self.bmp_next            = wx.Bitmap(INSTALLATION_PATH+"/etc/icons/next.png")
    self.bmp_tracking        = wx.Bitmap(INSTALLATION_PATH+"/etc/icons/tracking_view_2.png")
    self.bmp_frames          = wx.Bitmap(INSTALLATION_PATH+"/etc/icons/frames_view_2.png")
    self.bmp_timeline        = wx.Bitmap(INSTALLATION_PATH+"/etc/icons/timeline.png")
    self.bmp_swap            = wx.Bitmap(INSTALLATION_PATH+"/etc/icons/swap.png")

  def UpdateStatus(self, message):
    self.SetStatusText(message)

  def Setup_Controls(self):
    self.Panel   = wx.Panel(self) 

    self.DPI     = 100
    self.Fig1    = Figure((5.0, 4.0), dpi=self.DPI)
    self.Fig2    = Figure((5.0, 4.0), dpi=self.DPI)
    self.Canvas1 = FigureCanvas(self.Panel, -1, self.Fig1)
    self.Canvas2 = FigureCanvas(self.Panel, -1, self.Fig2)
    self.Fig1.set_facecolor("white")
    self.Fig2.set_facecolor("white")

    self.PlotAxes = self.Fig1.add_subplot(111)

     
    # Create timers
    self.PlayTimer = wx.Timer(self)
    self.Bind(wx.EVT_TIMER, self.on_Playing_Timer, self.PlayTimer)

    # Create the navigation toolbars, tied to the canvas
    self.Toolbar1 = Toolbar1(self.Canvas1)
    self.Toolbar2 = Toolbar2(self.Canvas2)

    # Plot areas
    self.SizerPlotArea1 = wx.BoxSizer(wx.VERTICAL)
    self.SizerPlotArea1.Add( self.Canvas1, 1, wx.LEFT | wx.TOP | wx.GROW )
    self.SizerPlotArea2 = wx.BoxSizer(wx.VERTICAL)
    self.SizerPlotArea2.Add( self.Canvas2, 1, wx.LEFT | wx.TOP | wx.GROW )
    self.SizerPlotAreas = wx.BoxSizer(wx.HORIZONTAL)
    self.SizerPlotAreas.Add( self.SizerPlotArea1, 1, wx.EXPAND )
    self.SizerPlotAreas.Add( wx.StaticLine(self.Panel, -1, style=wx.LI_VERTICAL), 0, wx.EXPAND )
    self.SizerPlotAreas.Add( self.SizerPlotArea2, 1, wx.EXPAND )

    #
    # Plot controls
    #

    # Toggle plot controls 
    self.TogglePlotControlsButton      = wx.ToggleButton(self.Panel, -1, Decorations.ARROW_DOWN, size=(-1, 25))
    self.SizerTogglePlotControlsButton = wx.BoxSizer(wx.HORIZONTAL)
    self.SizerTogglePlotControlsButton.Add( self.TogglePlotControlsButton, 1, wx.EXPAND )
    self.Bind(wx.EVT_TOGGLEBUTTON, self.on_TogglePlotControls_Button, self.TogglePlotControlsButton)

    # Playbar
    self.SizerPlaybar            = wx.BoxSizer( wx.HORIZONTAL )
    self.PlaybarTrajectoryToggle = wx.BitmapButton(self.Panel, -1, size=(100,30), bitmap=self.bmp_tracking)
    self.PlaybarTrajectoryToggleValue = False
    self.PlaybarParaverButton    = wx.BitmapButton(self.Panel, -1, size=(100,30), bitmap=self.bmp_timeline)
    self.PlaybarPrevButton = wx.BitmapButton(self.Panel, -1, size=(100,30), bitmap=self.bmp_prev)
    self.PlaybarPlayButton = wx.BitmapButton(self.Panel, -1, size=(100,30), bitmap=self.bmp_play)
    self.PlaybarNextButton = wx.BitmapButton(self.Panel, -1, size=(100,30), bitmap=self.bmp_next)
    self.SizerPlaybar.Add( self.PlaybarTrajectoryToggle, 0 )
    self.SizerPlaybar.Add( self.PlaybarParaverButton,    0 )
    self.SizerPlaybar.Add( wx.BoxSizer( wx.HORIZONTAL ), 1, wx.EXPAND )
    self.SizerPlaybar.Add( self.PlaybarPrevButton,       0 )
    self.SizerPlaybar.Add( self.PlaybarPlayButton,       0 )
    self.SizerPlaybar.Add( self.PlaybarNextButton,       0 )

    self.Bind(wx.EVT_BUTTON, self.on_PlaybarTrajectory_Toggle, self.PlaybarTrajectoryToggle)
    self.Bind(wx.EVT_BUTTON, self.on_PlaybarParaver_Button,    self.PlaybarParaverButton)
    self.Bind(wx.EVT_BUTTON, self.on_PlaybarPrevious_Button,   self.PlaybarPrevButton)
    self.Bind(wx.EVT_BUTTON, self.on_PlaybarPlay_Button,       self.PlaybarPlayButton)
    self.Bind(wx.EVT_BUTTON, self.on_PlaybarNext_Button,       self.PlaybarNextButton)

    # Frame selector
    self.Timeline = FrameTimeline( self, self.Panel, self.Data.GetNumberOfFrames(), self.Plotter )
    self.SizerTimeline = wx.BoxSizer( wx.HORIZONTAL )
    self.SizerTimeline.Add( self.Timeline, 1, wx.EXPAND )

    #
    # Scatter plot controls
    #
 
    # Axes box
    self.AxesBox      = wx.StaticBox(self.Panel, -1, "Axes")
    self.SizerAxesBox = wx.StaticBoxSizer(self.AxesBox, wx.HORIZONTAL)

    self.SizerAxesControls1 = wx.BoxSizer(wx.VERTICAL)
    self.SizerAxesControls2 = wx.BoxSizer(wx.VERTICAL) 
    self.SizerXAxis = wx.BoxSizer(wx.HORIZONTAL)
    self.SizerYAxis = wx.BoxSizer(wx.HORIZONTAL)
    self.SizerZAxis = wx.BoxSizer(wx.HORIZONTAL)
    self.SizerAxesControls2.Add( self.SizerXAxis, 1, wx.EXPAND )
    self.SizerAxesControls2.Add( self.SizerYAxis, 1, wx.EXPAND )
    self.SizerAxesControls2.Add( self.SizerZAxis, 1, wx.EXPAND )
    self.SizerAxesBox.Add( Gap(wx.VERTICAL), 1, wx.EXPAND )
    self.SizerAxesBox.Add( self.SizerAxesControls1, 0.1, wx.EXPAND )
    self.SizerAxesBox.Add( self.SizerAxesControls2, 50, wx.EXPAND )

    # Swap axes button
    self.AxesSwapButton = wx.BitmapButton(self.Panel, -1, size=(30, -1), bitmap=self.bmp_swap)
    self.Bind(wx.EVT_BUTTON, self.on_Swap_Button, self.AxesSwapButton)

    # 3D button
    self.Activate3DButton = wx.ToggleButton(self.Panel, -1, "3D", size=(30, -1))
    self.Bind(wx.EVT_TOGGLEBUTTON, self.on_3D_Button, self.Activate3DButton)

    self.SizerAxesControls1.Add( self.AxesSwapButton, 2, wx.EXPAND )
    self.SizerAxesControls1.Add( self.Activate3DButton, 1, wx.EXPAND )

    # X, Y, Z axes combos
    FrameMetrics    = self.Data.GetFrameMetrics( self.FocusOnFrame )
    MetricChoices   = [ m.upper()[2:] for m in FrameMetrics ]
    self.XAxisLabel = wx.StaticText(self.Panel, -1, "  X: ")
    self.XAxisCombo = wx.ComboBox(self.Panel, -1, choices=MetricChoices, style=wx.CB_READONLY)
    self.XAxisCombo.SetSelection(1)
    self.YAxisLabel = wx.StaticText(self.Panel, -1, "  Y: ")
    self.YAxisCombo = wx.ComboBox(self.Panel, -1, choices=MetricChoices, style=wx.CB_READONLY)
    self.YAxisCombo.SetSelection(0)
    self.ZAxisLabel = wx.StaticText(self.Panel, -1, "  Z: ")
    self.ZAxisCombo = wx.ComboBox(self.Panel, -1, choices=MetricChoices, style=wx.CB_READONLY)
    if (len(FrameMetrics) > 2):
      self.ZAxisCombo.SetSelection(2)
    self.ZAxisCombo.Disable()
    self.Bind(wx.EVT_COMBOBOX, self.on_XAxis_Change, self.XAxisCombo)
    self.Bind(wx.EVT_COMBOBOX, self.on_YAxis_Change, self.YAxisCombo)
    self.Bind(wx.EVT_COMBOBOX, self.on_ZAxis_Change, self.ZAxisCombo)

    # Log scale buttons
    self.XAxisLogChecker = wx.CheckBox(self.Panel, -1, 'Log scale')
    self.YAxisLogChecker = wx.CheckBox(self.Panel, -1, 'Log scale')
    self.ZAxisLogChecker = wx.CheckBox(self.Panel, -1, 'Log scale')
    self.Bind(wx.EVT_CHECKBOX, self.on_XLog_Checker, self.XAxisLogChecker)
    self.Bind(wx.EVT_CHECKBOX, self.on_YLog_Checker, self.YAxisLogChecker)
    self.Bind(wx.EVT_CHECKBOX, self.on_ZLog_Checker, self.ZAxisLogChecker)
    self.ZAxisLogChecker.Disable()

    # Scale to number of tasks buttons
    self.XAxisRatioChecker = wx.CheckBox(self.Panel, -1, 'Ratio by #tasks')
    self.YAxisRatioChecker = wx.CheckBox(self.Panel, -1, 'Ratio by #tasks')
    self.ZAxisRatioChecker = wx.CheckBox(self.Panel, -1, 'Ratio by #tasks')
    self.Bind(wx.EVT_CHECKBOX, self.on_XScale_Checker, self.XAxisRatioChecker)
    self.Bind(wx.EVT_CHECKBOX, self.on_YScale_Checker, self.YAxisRatioChecker)
    self.Bind(wx.EVT_CHECKBOX, self.on_ZScale_Checker, self.ZAxisRatioChecker)
    self.ZAxisRatioChecker.Disable()

    # Arrange the widgets
    self.SizerXAxis.Add( Gap(wx.HORIZONTAL), 1, wx.EXPAND )
    self.SizerYAxis.Add( Gap(wx.HORIZONTAL), 1, wx.EXPAND )
    self.SizerZAxis.Add( Gap(wx.HORIZONTAL), 1, wx.EXPAND )

    self.SizerXAxis.Add( self.XAxisLabel, 0, wx.CENTER )
    self.SizerYAxis.Add( self.YAxisLabel, 0, wx.CENTER )
    self.SizerZAxis.Add( self.ZAxisLabel, 0, wx.CENTER )

    self.SizerXAxis.Add( self.XAxisCombo, 9, wx.EXPAND )
    self.SizerYAxis.Add( self.YAxisCombo, 9, wx.EXPAND )
    self.SizerZAxis.Add( self.ZAxisCombo, 9, wx.EXPAND )

    self.SizerXAxis.Add( Gap(wx.HORIZONTAL), 1, wx.EXPAND )
    self.SizerYAxis.Add( Gap(wx.HORIZONTAL), 1, wx.EXPAND )
    self.SizerZAxis.Add( Gap(wx.HORIZONTAL), 1, wx.EXPAND )

    self.SizerXAxis.Add( self.XAxisLogChecker, 0, wx.CENTER )
    self.SizerYAxis.Add( self.YAxisLogChecker, 0, wx.CENTER )
    self.SizerZAxis.Add( self.ZAxisLogChecker, 0, wx.CENTER )

    self.SizerXAxis.Add( Gap(wx.HORIZONTAL), 1, wx.EXPAND )
    self.SizerYAxis.Add( Gap(wx.HORIZONTAL), 1, wx.EXPAND )
    self.SizerZAxis.Add( Gap(wx.HORIZONTAL), 1, wx.EXPAND )

    self.SizerXAxis.Add( self.XAxisRatioChecker, 0, wx.CENTER )
    self.SizerYAxis.Add( self.YAxisRatioChecker, 0, wx.CENTER )
    self.SizerZAxis.Add( self.ZAxisRatioChecker, 0, wx.CENTER )

    self.SizerXAxis.Add( Gap(wx.HORIZONTAL), 1, wx.EXPAND )
    self.SizerYAxis.Add( Gap(wx.HORIZONTAL), 1, wx.EXPAND )
    self.SizerZAxis.Add( Gap(wx.HORIZONTAL), 1, wx.EXPAND )


    #
    # Graph controls
    #

    # Fitting controls
    self.FittingBox          = wx.StaticBox(self.Panel, -1, "Fitting")
    self.SizerFittingBox     = wx.StaticBoxSizer(self.FittingBox, wx.VERTICAL)

    self.FittingSamplesLabel = wx.StaticText(self.Panel, -1, "Samples: ")
    self.FittingSamplesText  = wx.TextCtrl(self.Panel, -1, size=(100, -1), style=wx.TE_PROCESS_ENTER)
    self.FittingSamplesText.SetValue("0")
    self.Bind(wx.EVT_TEXT_ENTER, self.on_FittingSamples_Change, self.FittingSamplesText)
 
    self.FittingModelsList = ['Linear', 'Quadratic', 'Cubic', 'Log', 'Linear log' ]
    self.FittingModelLabel = wx.StaticText(self.Panel, -1, "Model: ")
    self.FittingModelCombo = wx.ComboBox( self.Panel, -1, 
                                          value=self.FittingModelsList[0], 
                                          size=(100, -1), 
                                          choices=self.FittingModelsList, 
                                          style=wx.CB_DROPDOWN )
    self.FittingModelCombo.SetSelection(0)
    self.Bind(wx.EVT_COMBOBOX, self.on_FittingModel_Change, self.FittingModelCombo)

    self.FittingFormula = wx.StaticText(self.Panel, -1, "")
    self.FittingFormula.Disable()
    self.SizerFittingFormula = wx.BoxSizer( wx.HORIZONTAL )
    self.SizerFittingFormula.Add( self.FittingFormula )

    self.SizerFittingSamplesAndModel = wx.BoxSizer( wx.HORIZONTAL )

    self.SizerFittingSamplesAndModel.Add( Gap(wx.HORIZONTAL), 1, wx.EXPAND )
    self.SizerFittingSamplesAndModel.Add( self.FittingSamplesLabel,     0, wx.CENTER )
    self.SizerFittingSamplesAndModel.Add( self.FittingSamplesText,      4, wx.EXPAND )
    self.SizerFittingSamplesAndModel.Add( Gap(wx.HORIZONTAL), 1, wx.EXPAND )
    self.SizerFittingSamplesAndModel.Add( self.FittingModelLabel,       0, wx.CENTER )
    self.SizerFittingSamplesAndModel.Add( self.FittingModelCombo,       4, wx.EXPAND )
    self.SizerFittingSamplesAndModel.Add( Gap(wx.HORIZONTAL), 1, wx.EXPAND )

    self.SizerFittingBox.Add( self.SizerFittingSamplesAndModel, 1, wx.EXPAND )
    self.SizerFittingBox.Add( self.SizerFittingFormula,         1, wx.EXPAND )
    self.SizerFittingBox.Add( Gap(wx.HORIZONTAL),     1, wx.EXPAND )


    #
    # Selectors
    #

    # Toggle selectors
    self.ToggleSelectorsButton = wx.ToggleButton(self.Panel, -1, Decorations.ARROW_RIGHT, size=(25, -1))
    self.SizerToggleSelectorsButton = wx.BoxSizer(wx.VERTICAL)
    self.SizerToggleSelectorsButton.Add( self.ToggleSelectorsButton, 1, wx.EXPAND )
    self.Bind(wx.EVT_TOGGLEBUTTON, self.on_ToggleSelectors_Button, self.ToggleSelectorsButton)

    # Cluster selector
    self.ClusterSelector = CheckListCtrl(self.Panel)
    self.ClusterSelector.InsertColumn(0, 'Display regions', width=10);

    index = self.ClusterSelector.InsertStringItem(sys.maxint, 'Filtered')
    (r, g, b) = Decorations.RGBColor0_255(DataManager.CLUSTER_ID_THRESHOLD_FILTERED)
    self.ClusterSelector.SetItemBackgroundColour(index, wx.Color(r, g, b))
    (r, g, b) = Decorations.FontColor( (r, g, b) )
    self.ClusterSelector.SetItemTextColour(index, wx.Color(r, g, b))
    self.ClusterSelector.CheckItem(index, False)
    index = self.ClusterSelector.InsertStringItem(sys.maxint, 'Untracked')
    (r, g, b) = Decorations.RGBColor0_255(DataManager.CLUSTER_ID_UNTRACKED)
    self.ClusterSelector.SetItemBackgroundColour(index, wx.Color(r, g, b))
    (r, g, b) = Decorations.FontColor( (r, g, b) )
    self.ClusterSelector.SetItemTextColour(index, wx.Color(r, g, b))
    self.ClusterSelector.CheckItem(index, False)

    for cluster_id in range(self.Data.GetFirstObject(), self.Data.GetLastObject()+1):
      index = self.ClusterSelector.InsertStringItem(sys.maxint, 'Region '+str(self.Data.PrettyCluster(cluster_id)))
      (r, g, b) = Decorations.RGBColor0_255(cluster_id)
      self.ClusterSelector.SetItemBackgroundColour(index, wx.Color(r, g, b))
      (r, g, b) = Decorations.FontColor( (r, g, b) )
      self.ClusterSelector.SetItemTextColour(index, wx.Color(r, g, b))
      self.ClusterSelector.CheckItem(index, True)

    self.ClusterSelector.Select(2, True)
    self.ClusterSelector.OnCheckItem = self.on_ClusterSelector_Display
    self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.on_ClusterSelector_Focus, self.ClusterSelector)
    self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.on_ClusterSelector_Focus, self.ClusterSelector)

    self.ClusterSelectorButtonAll  = wx.Button( self.Panel, -1, "All")
    self.Bind(wx.EVT_BUTTON, self.on_ClusterSelectorButton_All, self.ClusterSelectorButtonAll)
    self.ClusterSelectorButtonNone = wx.Button( self.Panel, -1, "None" )
    self.Bind(wx.EVT_BUTTON, self.on_ClusterSelectorButton_None, self.ClusterSelectorButtonNone)

    self.SizerClusterSelector = wx.BoxSizer(wx.VERTICAL)
    self.SizerClusterSelector.Add( self.ClusterSelector, 1, wx.EXPAND )
    self.SizerClusterSelectorButtons = wx.BoxSizer( wx.HORIZONTAL )
    self.SizerClusterSelectorButtons.Add( self.ClusterSelectorButtonAll, 1, wx.EXPAND )
    self.SizerClusterSelectorButtons.Add( self.ClusterSelectorButtonNone, 1, wx.EXPAND )

    # Metric selector
    self.MetricSelector = CheckListCtrl(self.Panel)
    self.MetricSelector.InsertColumn(0, 'Display metrics', width=10)
    FrameMetrics    = self.Data.GetFrameMetrics( self.FocusOnFrame )
    for metric in FrameMetrics:
      pretty_metric = self.Data.PrettyMetric( metric )
      index = self.MetricSelector.InsertStringItem(sys.maxint, pretty_metric)
      metric_id = index
      (r, g, b) = Decorations.MetricColor(metric_id)
      self.MetricSelector.SetItemBackgroundColour(index, wx.Color(r*255, g*255, b*255))
      (r, g, b) = Decorations.FontColor( (r*255, g*255, b*255) )
      self.MetricSelector.SetItemTextColour(index, wx.Color(r, g, b))

      if (self.Data.isClusteringDimension(metric)):
        self.MetricSelector.CheckItem( index )

    self.MetricSelector.Select(0, True)
    self.MetricSelector.OnCheckItem = self.on_MetricSelector_Display
    self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.on_MetricSelector_Focus, self.MetricSelector)

    self.MetricSelectorButtonAll  = wx.Button( self.Panel, -1, "All")
    self.Bind(wx.EVT_BUTTON, self.on_MetricSelectorButton_All, self.MetricSelectorButtonAll)
    self.MetricSelectorButtonNone = wx.Button( self.Panel, -1, "None")
    self.Bind(wx.EVT_BUTTON, self.on_MetricSelectorButton_None, self.MetricSelectorButtonNone)

    self.MetricSelectorRatioChecker = wx.CheckBox(self.Panel, -1, 'Ratio by #tasks')
    self.Bind(wx.EVT_CHECKBOX, self.on_MetricSelectorRatioChecker, self.MetricSelectorRatioChecker)

    self.SizerMetricSelector = wx.BoxSizer(wx.VERTICAL)
    self.SizerMetricSelector.Add( self.MetricSelector, 1, wx.EXPAND )
    self.SizerMetricSelectorButtons = wx.BoxSizer( wx.HORIZONTAL )
    self.SizerMetricSelectorButtons.Add( self.MetricSelectorButtonAll, 1, wx.EXPAND )
    self.SizerMetricSelectorButtons.Add( self.MetricSelectorButtonNone, 1, wx.EXPAND )
    
    # Arrange selectors
    self.SizerSelectorsControls = wx.BoxSizer(wx.VERTICAL)
    self.SizerSelectorsControls.Add( self.SizerClusterSelector, 1, wx.EXPAND )
    self.SizerSelectorsControls.Add( self.SizerClusterSelectorButtons, 0, wx.EXPAND )
    self.SizerSelectorsControls.Add( self.SizerMetricSelector, 1, wx.EXPAND )
    self.SizerSelectorsControls.Add( self.SizerMetricSelectorButtons, 0, wx.EXPAND )
    self.SizerSelectorsControls.Add( self.MetricSelectorRatioChecker, 0, wx.EXPAND )

    #
    # General Layout 
    #
    self.SizerPlotsControls         = wx.BoxSizer( wx.VERTICAL )
    self.SizerGenericPlotsControls  = wx.BoxSizer( wx.VERTICAL )
    self.SizerSpecificPlotsControls = wx.BoxSizer( wx.HORIZONTAL )

    self.SizerSpecificPlotsControls.Add( self.SizerAxesBox,    1, wx.EXPAND)
    self.SizerSpecificPlotsControls.Add( self.SizerFittingBox, 1, wx.EXPAND)
    self.SizerGenericPlotsControls.Add( self.SizerPlaybar,    1, wx.EXPAND )
    self.SizerGenericPlotsControls.Add( self.SizerTimeline,   0, wx.EXPAND )
    self.SizerPlotsControls.Add( self.SizerSpecificPlotsControls, 0, wx.EXPAND )
    self.SizerPlotsControls.Add( self.SizerGenericPlotsControls,  0, wx.EXPAND )

    self.SizerToolbars = wx.BoxSizer(wx.HORIZONTAL)
    self.SizerToolbars.Add( self.Toolbar1, 1, wx.EXPAND )
    self.SizerToolbars.Add( wx.StaticLine(self.Panel, -1, style=wx.LI_VERTICAL), 0, wx.EXPAND )
    self.SizerToolbars.Add( self.Toolbar2, 1, wx.EXPAND )
    
    self.SizerAllPlots = wx.BoxSizer(wx.VERTICAL)
    self.SizerAllPlots.Add( self.SizerToolbars,                 0, wx.EXPAND )
    self.SizerAllPlots.Add( self.SizerPlotAreas,                5, wx.EXPAND )
    self.SizerAllPlots.Add( self.SizerTogglePlotControlsButton, 0, wx.EXPAND )
    self.SizerAllPlots.Add( self.SizerPlotsControls,            0, wx.EXPAND )

    self.SizerAllSelectors = wx.BoxSizer(wx.HORIZONTAL)
    self.SizerAllSelectors.Add( self.SizerToggleSelectorsButton, 0, wx.EXPAND )
    self.SizerAllSelectors.Add( self.SizerSelectorsControls,     0, wx.EXPAND )

    self.SizerWindow = wx.BoxSizer(wx.HORIZONTAL)
    self.SizerWindow.Add( self.SizerAllPlots,     3, wx.EXPAND )
    self.SizerWindow.Add( self.SizerAllSelectors, 0, wx.EXPAND )

    self.Panel.SetSizer( self.SizerWindow )
    self.SizerWindow.Fit(self)
    self.SetMinSize( self.GetSize() )

  def OpenCallersDialog(self, frame, object_id):
    cluster_id = self.GetClusterID( object_id )
    (data, labels) = self.Data.GetCallers( frame, cluster_id )
    if ((len(data) > 0) and (len(labels) > 0)):
      dialog = wx.PySimpleApp(False)
  
      dialog.main = callers_frame.CallersFrame(self.Panel, "region "+str(cluster_id), data, labels)
      dialog.main.Centre()
      dialog.main.Show()
      dialog.MainLoop()

  def GetLeftFigure(self):
    return self.Fig1

  def GetRightFigure(self):
    return self.Fig2

  def SelectFrame(self, frame):
    if (frame != self.FocusOnFrame):
      self.Timeline.HighlightSelection( frame )
      self.FocusOnFrame = frame
      self.Plotter.ClearAnnotations()
      self.Plotter.Display_Objects()
    

  def GetSelectedFrame(self):
    return self.FocusOnFrame

  def GetSelectedObject(self):
    index = self.ClusterSelector.GetFirstSelected()
    if (index < 0):
      index = 2
    return index

  def GetSelectedCluster(self):
    return self.GetClusterID( self.GetSelectedObject() )

  def GetSelectedMetricX(self):
    FrameMetrics = self.Data.GetFrameMetrics( self.FocusOnFrame )
    return FrameMetrics[ self.XAxisCombo.GetSelection() ]

  def GetSelectedMetricY(self):
    FrameMetrics = self.Data.GetFrameMetrics( self.FocusOnFrame )
    return FrameMetrics[ self.YAxisCombo.GetSelection() ]

  def GetSelectedMetricZ(self):
    FrameMetrics = self.Data.GetFrameMetrics( self.FocusOnFrame )
    return FrameMetrics[ self.ZAxisCombo.GetSelection() ]
  
  def GetSelectedMetric(self):
    index = self.MetricSelector.GetFirstSelected()
    if (index < 0):
      index = 0
    return self.Data.GetMetricName( self.FocusOnFrame, index )

  def GetClusterID(self, object_id):
    return object_id + 4

  def GetObjectID(self, cluster_id):
    return cluster_id - 4

  def DisplayingObject(self, cluster_id):
    object_id = self.GetObjectID( cluster_id )
    return self.ClusterSelector.IsChecked( object_id )

  def GetDisplayingObjects(self):
    all_selected_objects = []

    for object_id in range(self.ClusterSelector.GetItemCount()):
      if (self.ClusterSelector.IsChecked( object_id )):
        all_selected_objects.append( object_id )
    return all_selected_objects

  def GetDisplayingClusters(self):
    all_selected_clusters = []
    all_selected_objects  = self.GetDisplayingObjects()
    for object_id in all_selected_objects:
      all_selected_clusters.append( self.GetClusterID( object_id ) )
    return all_selected_clusters
 
  def GetDisplayingMetrics(self):
    all_selected_metrics = []

    for metric_id in range(self.MetricSelector.GetItemCount()):
      if (self.MetricSelector.IsChecked( metric_id )):
        metric_name = self.Data.GetMetricName( self.GetSelectedFrame(), metric_id )
        all_selected_metrics.append( metric_name )
    
    return all_selected_metrics

  def in_2D(self):
    return not self.in_3D()

  def in_3D(self):
    return self.Activate3DButton.GetValue()

  def LogX(self):
    return self.XAxisLogChecker.IsChecked()
  def LogY(self):
    return self.YAxisLogChecker.IsChecked()
  def LogZ(self):
    return self.ZAxisLogChecker.IsChecked()

  def RatioX(self):
    return self.XAxisRatioChecker.IsChecked()
  def RatioY(self):
    return self.YAxisRatioChecker.IsChecked()
  def RatioZ(self):
    return self.ZAxisRatioChecker.IsChecked()
  def RatioMetric(self):
    return self.MetricSelectorRatioChecker.IsChecked()

  def GetThumbAxes(self, frame):
    return self.Timeline.GetThumbAxes(frame)

  def ClearThumbs(self):
    self.Timeline.ClearThumbs()

  def DisableControls(self):
    return
  def EnableControls(self):
    return

  def GetFittingSamples(self):
    return int(self.FittingSamplesText.GetValue())
  def GetFittingModel(self):
    return self.FittingModelCombo.GetSelection()
  def SetFittingFormula(self, formula):
    self.FittingFormula.SetLabel( formula )

  #
  # Triggers
  #
  def on_TogglePlotControls_Button(self, event):
    if (Verbose):
      print "EVT_TOGGLEBUTTON::TogglePlotControlsButton"
    Btn   = event.GetEventObject()
    State = Btn.GetValue()

    if (State):
      Btn.SetLabel(Decorations.ARROW_UP)
    else:
      Btn.SetLabel(Decorations.ARROW_DOWN)

    self.SizerPlotsControls.ShowItems(not State)
    self.Panel.Layout()
    return

  def on_XAxis_Change(self, event):
    if (Verbose):
      print "EVT_COMBOBOX::XAxisCombo"
    self.Plotter.Replot(True)
    return

  def on_YAxis_Change(self, event):
    if (Verbose):
      print "EVT_COMBOBOX::YAxisCombo"
    self.Plotter.Replot(True)
    return

  def on_ZAxis_Change(self, event):
    if (Verbose):
      print "EVT_COMBOBOX::ZAxisCombo"
    self.Plotter.Replot(True)
    return

  def on_XLog_Checker(self, event):
    if (Verbose):
      print "EVT_CHECKBOX::XAxisLogChecker"
    self.Plotter.Rescale()
    return

  def on_YLog_Checker(self, event):
    if (Verbose):
      print "EVT_CHECKBOX::YAxisLogChecker"
    self.Plotter.Rescale()
    return

  def on_ZLog_Checker(self, event):
    if (Verbose):
      print "EVT_CHECKBOX::ZAxisLogChecker"
    self.Plotter.Rescale()
    return

  def on_XScale_Checker(self, event):
    if (Verbose):
      print "EVT_CHECKBOX::XAxisRatioChecker"
    self.Plotter.Replot()
    return

  def on_YScale_Checker(self, event):
    if (Verbose):
      print "EVT_CHECKBOX::YAxisRatioChecker"
    self.Plotter.Replot()
    return

  def on_ZScale_Checker(self, event):
    if (Verbose):
      print "EVT_CHECKBOX::ZAxisRatioChecker"
    self.Plotter.Replot()
    return

  def on_Swap_Button(self, event):
    if (Verbose):
      print "EVT_BUTTON::AxesSwapButton"
    old_x       = self.XAxisCombo.GetSelection()
    old_y       = self.YAxisCombo.GetSelection()
    old_log_x   = self.XAxisLogChecker.IsChecked()
    old_log_y   = self.YAxisLogChecker.IsChecked()
    old_scale_x = self.XAxisRatioChecker.IsChecked()
    old_scale_y = self.YAxisRatioChecker.IsChecked()

    self.XAxisCombo.SetSelection( old_y )
    self.YAxisCombo.SetSelection( old_x )
    self.XAxisLogChecker.SetValue( old_log_y )
    self.YAxisLogChecker.SetValue( old_log_x )
    self.XAxisRatioChecker.SetValue( old_scale_y )
    self.YAxisRatioChecker.SetValue( old_scale_x )

    self.Plotter.Replot(True)
    return

  def on_3D_Button(self, event):
    if (Verbose):
      print "EVT_BUTTON::Activate3DButton"

    if self.Activate3DButton.GetValue():
      self.ZAxisCombo.Enable()
      self.PlotAxes = self.Fig1.add_subplot(111, projection='3d')
    else:
      self.ZAxisCombo.Disable()
      self.PlotAxes = self.Fig1.add_subplot(111)


    self.Plotter.Replot(True)
    return

  def GetPlotAxes(self):
    return self.PlotAxes

  def on_FittingSamples_Change(self, event):
    if (Verbose):
      print "EVT_TEXT_ENTER::FittingSamplesText"
    self.Plotter.ComputePlots2()
    return
  def on_FittingModel_Change(self, event):
    if (Verbose):
      print "EVT_COMBOBOX::FittingModelCombo"
    if (self.GetFittingSamples > 0):
      self.Plotter.ComputePlots2()
    return

  def on_PlaybarTrajectory_Toggle(self, event):
    if (Verbose):
      print "EVT_TOGGLEBUTTON::PlaybarTrajectoryToggle"

    if (self.PlaybarTrajectoryToggleValue):
      self.Setup_Frame_View()
    else:
      self.Setup_Trajectory_View()
    self.PlaybarTrajectoryToggleValue = not(self.PlaybarTrajectoryToggleValue)
    self.Plotter.Replot()
    return

  def in_Trajectory_View(self):
    return self.PlaybarTrajectoryToggleValue

  def in_Frame_View(self):
    return not self.PlaybarTrajectoryToggleValue 

  def Setup_Trajectory_View(self):
    self.PlaybarTrajectoryToggle.SetBitmapLabel(self.bmp_frames)
    self.PlaybarPrevButton.Disable()
    self.PlaybarPlayButton.Disable()
    self.PlaybarNextButton.Disable()
    self.Timeline.Disable()
    self.Toolbar1.Toggle_Points(False)
    self.Toolbar1.Toggle_Centroids(True)
    self.Toolbar1.Toggle_Hulls(False)

  def Setup_Frame_View(self):
    self.PlaybarTrajectoryToggle.SetBitmapLabel(self.bmp_tracking)
    self.PlaybarPrevButton.Enable()
    self.PlaybarPlayButton.Enable()
    self.PlaybarNextButton.Enable()
    self.Timeline.Enable()
    self.Toolbar1.Toggle_Points(True)
    self.Toolbar1.Toggle_Centroids(False)
    self.Toolbar1.Toggle_Hulls(False)

  def on_PlaybarParaver_Button(self, event):
    if (Verbose):
      print "EVT_BUTTON::PlaybarParaverButton"
    subprocess.Popen(["wxparaver", self.Data.GetTrace(self.GetSelectedFrame()), INSTALLATION_PATH+"/etc/clusterid.cfg"])

    return

  def on_PlaybarPrevious_Button(self, event):
    if (Verbose):
      print "EVT_BUTTON::PlaybarPrevButton"
    CurrentFrame   = self.GetSelectedFrame()
    NumberOfFrames = self.Data.GetNumberOfFrames()
    if (CurrentFrame - 1 >= 1):
      self.SelectFrame( CurrentFrame - 1 )
    return

  def on_Playing_Timer(self, event):
    self.SelectFrame( self.PlayingCurrentFrame )
    self.PlayingCurrentFrame = self.PlayingCurrentFrame + 1
    if (self.PlayingCurrentFrame > self.Data.GetNumberOfFrames()):
      self.PlayTimer.Stop()
      self.EnableControls()
    else:
      self.PlayTimer.Start(500, oneShot=True)

  def on_PlaybarPlay_Button(self, event):
    if (Verbose):
      print "EVT_BUTTON::PlaybarPlayButton"
    self.DisableControls()
    self.PlayingCurrentFrame = 1
    self.PlayTimer.Start(0, oneShot=True)
    return

  def on_PlaybarNext_Button(self, event):
    if (Verbose):
      print "EVT_BUTTON::PlaybarNextButton"
    CurrentFrame   = self.GetSelectedFrame()
    NumberOfFrames = self.Data.GetNumberOfFrames()
    if (CurrentFrame + 1 <= NumberOfFrames):
      self.SelectFrame( CurrentFrame + 1 )
    return

  def on_ToggleSelectors_Button(self, event):
    if (Verbose):
      print "EVT_TOGGLEBUTTON::ToggleSelectorsButton"
    Btn   = event.GetEventObject()
    State = Btn.GetValue()
    
    if (State):
      Btn.SetLabel(Decorations.ARROW_LEFT)
    else:
      Btn.SetLabel(Decorations.ARROW_RIGHT)
   
    self.SizerSelectorsControls.ShowItems(not State)
    self.Panel.Layout()
    return

  def on_ClusterSelector_Display(self, event, flag):
    if (Verbose):
      print "UN/CHECK::ClusterSelector"
    self.Plotter.Display_Objects()
    self.Plotter.ComputePlots2()
    return

  def on_ClusterSelector_Focus(self, event):
    event_type = event.GetEventType()
    index      = event.GetIndex()
    cluster_id = index - 1

    self.Plotter.ComputePlots2()
    if (event_type == wx.EVT_LIST_ITEM_SELECTED.typeId):
      if (Verbose):
        print "CLICKED::ClusterSelector"
    elif (event_type == wx.EVT_LIST_ITEM_ACTIVATED.typeId):
      if (Verbose):
        print "DOUBLE-CLICKED::ClusterSelector"
      self.OpenCallersDialog( self.GetSelectedFrame(), self.GetSelectedObject() )
    return

  def on_ClusterSelectorButton_All(self, event):
    if (Verbose):
      print "EVT_BUTTON::ClusterSelectorButtonAll"
    for index in range(self.ClusterSelector.GetItemCount()): 
      self.ClusterSelector.CheckItem(index, True)
    return

  def on_ClusterSelectorButton_None(self, event):
    if (Verbose):
      print "EVT_BUTTON::ClusterSelectorButtonNone"
    for index in range(self.ClusterSelector.GetItemCount()): 
      self.ClusterSelector.CheckItem(index, False)
    return
  
  def on_MetricSelector_Display(self, event, flag):
    if (Verbose):
      print "UN/CHECK::MetricSelector"
    index  = event
    metric = self.Data.GetFrameMetrics(1)[index]
    self.Plotter.ComputePlots2()
    return

  def on_MetricSelector_Focus(self, event):
    if (Verbose):
      print "EVT_LIST_ITEM_SELECTED::MetricSelector"

    index  = event.GetIndex()
    metric = self.MetricSelector.GetItem(index, 0).GetText()
    self.Plotter.ComputePlots2()
    return

  def on_MetricSelectorButton_All(self, event):
    if (Verbose):
      print "EVT_BUTTON::MetricSelectorButtonAll"
    for index in range(self.MetricSelector.GetItemCount()):
      self.MetricSelector.CheckItem(index, True)
    return

  def on_MetricSelectorButton_None(self, event):
    if (Verbose):
      print "EVT_BUTTON::MetricSelectorButtonNone"
    for index in range(self.MetricSelector.GetItemCount()):
      self.MetricSelector.CheckItem(index, False)
    return

  def on_MetricSelectorRatioChecker(self, event):
    self.Plotter.ComputePlots2()
    return

  def ShowingPoints(self):
    return (self.Toolbar1.GetToolState(self.Toolbar1.ON_POINTS_CHECK))

  def ShowingCentroids(self):
    return (self.Toolbar1.GetToolState(self.Toolbar1.ON_CENTROIDS_CHECK))

  def ShowingHulls(self):
    return (self.Toolbar1.GetToolState(self.Toolbar1.ON_HULLS_CHECK))

class Toolbar1(NavigationToolbar):
  ON_POINTS_CHECK  = wx.NewId()
  ON_CENTROIDS_CHECK = wx.NewId()
  ON_HULLS_CHECK     = wx.NewId()
  ON_GRID_CHECK     = wx.NewId()

  def __init__(self, canvas):
    NavigationToolbar.__init__(self, canvas)

    self.AddSeparator()

    self.AddCheckTool(
      self.ON_GRID_CHECK,
      wx.Bitmap(INSTALLATION_PATH+'/etc/icons/grid.png'),
      wx.Bitmap(INSTALLATION_PATH+'/etc/icons/grid.png'),
      'Shows the grid',
      'Shows the grid')

    self.AddSeparator()

    self.AddCheckTool(
      self.ON_POINTS_CHECK,
      wx.Bitmap(INSTALLATION_PATH+'/etc/icons/scatter.png'),
      wx.Bitmap(INSTALLATION_PATH+'/etc/icons/scatter.png'),
      'Draw the points of the cluster',
      'Draw the points of the cluster')

    self.AddCheckTool(
      self.ON_CENTROIDS_CHECK,
      wx.Bitmap(INSTALLATION_PATH+'/etc/icons/centroid.png'),
      wx.Bitmap(INSTALLATION_PATH+'/etc/icons/centroid.png'),
      'Draw the centroid of the cluster',
      'Draw the centroid of the cluster')
    self.CheckHull = self.AddCheckTool(
      self.ON_HULLS_CHECK,
      wx.Bitmap(INSTALLATION_PATH+'/etc/icons/hull.png'),
      wx.Bitmap(INSTALLATION_PATH+'/etc/icons/hull.png'),
      'Draw the perimeter of the cluster',
      'Draw the perimeter of the cluster')

    self.ToggleTool(self.ON_POINTS_CHECK, True)

    wx.EVT_TOOL(self, self.ON_GRID_CHECK, self.on_Grid_Check)
    wx.EVT_TOOL(self, self.ON_POINTS_CHECK, self.on_Points_Check)
    wx.EVT_TOOL(self, self.ON_HULLS_CHECK, self.on_Hulls_Check)
    wx.EVT_TOOL(self, self.ON_CENTROIDS_CHECK, self.on_Centroids_Check)

  def on_Grid_Check(self, event):
    App.main.Plotter.ShowGrid1( self.GetToolState(self.ON_GRID_CHECK) )

  def on_Points_Check(self, event):
    App.main.Plotter.Show_Points( self.GetToolState(self.ON_POINTS_CHECK) )
    App.main.Plotter.UpdateCanvas1()

  def on_Centroids_Check(self, event):
    App.main.Plotter.Show_Centroids( self.GetToolState(self.ON_CENTROIDS_CHECK) )
    App.main.Plotter.UpdateCanvas1()

  def on_Hulls_Check(self, event):
    App.main.Plotter.Show_Hulls( self.GetToolState(self.ON_HULLS_CHECK) )
    App.main.Plotter.UpdateCanvas1()

  def Toggle_Points(self, bool):
    self.ToggleTool( self.ON_POINTS_CHECK, bool )

  def Toggle_Centroids(self, bool):
    self.ToggleTool( self.ON_CENTROIDS_CHECK, bool )

  def Toggle_Hulls(self, bool):
    self.ToggleTool( self.ON_HULLS_CHECK, bool )


class Toolbar2(NavigationToolbar):
  ON_BOXPLOT_CHECK = wx.NewId()
  ON_LEGEND_CHECK  = wx.NewId()
  ON_GRID_CHECK    = wx.NewId()

  def __init__(self, canvas):
    NavigationToolbar.__init__(self, canvas)

    self.AddSeparator()

    self.AddCheckTool(
      self.ON_GRID_CHECK,
      wx.Bitmap(INSTALLATION_PATH+'/etc/icons/grid.png'),
      wx.Bitmap(INSTALLATION_PATH+'/etc/icons/grid.png'),
      'Shows the grid',
      'Shows the grid')

    self.AddSeparator()

    self.AddCheckTool(
      self.ON_BOXPLOT_CHECK,
      wx.Bitmap(INSTALLATION_PATH+'/etc/icons/boxplot.png'),
      wx.Bitmap(INSTALLATION_PATH+'/etc/icons/boxplot.png'),
      'Switch between boxplots and trend lines',
      'Switch between boxplots and trend lines')

    self.AddCheckTool(
      self.ON_LEGEND_CHECK,
      wx.Bitmap(INSTALLATION_PATH+'/etc/icons/legend.png'),
      wx.Bitmap(INSTALLATION_PATH+'/etc/icons/legend.png'),
      'Show plots legends',
      'Show plots legends')

    wx.EVT_TOOL(self, self.ON_GRID_CHECK, self.on_Grid_Check)
    wx.EVT_TOOL(self, self.ON_BOXPLOT_CHECK, self.on_Boxplot_Check)
    wx.EVT_TOOL(self, self.ON_LEGEND_CHECK, self.on_Legend_Check)

  def on_Grid_Check(self, event):
    App.main.Plotter.ShowGrid2( self.GetToolState(self.ON_GRID_CHECK) )

  def on_Boxplot_Check(self, event):
    App.main.Plotter.ComputePlots2()

  def on_Legend_Check(self, event):
    App.main.Plotter.ComputePlots2()



#
# main()
#

def Usage():
  print ""
  print "Error: Invalid arguments!"
  print ""
  print "USAGE:"
  print "  xtrack <tracking_output.xtrack>"
  print ""

# Parse arguments
argc = len(sys.argv)

if (argc != 2):
  Usage()
  sys.exit(-1)

Data    = DataManager.DataManager( None, sys.argv[1] )

Plotter = PlottingManager.PlottingManager( None, Data )

App = wx.PySimpleApp(False)
App.main = MainFrame(None, "Tracking", Data, Plotter )
App.main.Show()
App.MainLoop()
